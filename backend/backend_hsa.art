/*
 * D = A * B + C
 *
 * Where:
 *
 * A:    (  -> K )
 *       (       )
 *       (| M    )
 *       (V      )
 *
 * B:    (  -> N )
 *       (       )
 *       (| K    )
 *       (V      )
 *
 * C, D: (  -> N )
 *       (       )
 *       (| M    )
 *       (V      )
 */

//Tested with ROCm 6.3.3
//TODO: This requires a patch in runtime:
/* in hsa_platform.cpp:616
-    std::string attrs = "-trap-handler";
+    std::string attrs = "-trap-handler,+wavefrontsize32,-wavefrontsize64";
*/

type amdgcn_acc_datatype = simd[c_element_type * 16];
type amdgcn_mat_datatype = simd[a_element_type * 16];

#[import(cc = "device", name = "llvm.amdgcn.wmma.f16.16x16x16.f16.v16f16.v16f16")] fn amdgcn_wmma(amdgcn_mat_datatype, amdgcn_mat_datatype, amdgcn_acc_datatype, bool) -> amdgcn_acc_datatype;

static HSAWMMAOperations = WMMAOperations [amdgcn_mat_datatype, amdgcn_mat_datatype, amdgcn_acc_datatype] {
    load_a = @|fragment_tensor| {
        let lane = amdgcn_workitem_id_x() % 16;
        let mut fragment : amdgcn_mat_datatype;
        for ele in range(0, 16) {
            fragment(ele) = fragment_tensor.data(addr_tensor(ele, lane, fragment_tensor));
        }
        fragment
    },
    load_b = @|fragment_tensor| {
        let lane = amdgcn_workitem_id_x() % 16;
        let mut fragment : amdgcn_mat_datatype;
        for ele in range(0, 16) {
            fragment(ele) = fragment_tensor.data(addr_tensor(lane, ele, fragment_tensor));
        }
        fragment
    },
    load_c = @|fragment_tensor| {
        let lane = amdgcn_workitem_id_x() % 16;
        let mut fragment : amdgcn_acc_datatype;
        for ele in range(0, 8) {
            let r = ele * 2 + (amdgcn_workitem_id_x() % wave_size / 16);

            fragment(ele * 2) = fragment_tensor.data(addr_tensor(lane, r, fragment_tensor));
        }
        fragment
    },
    wmma = @|a_fragment, _a_layout, b_fragment, _b_layout, acc_fragment, _c_layout| {
        amdgcn_wmma(a_fragment, b_fragment, acc_fragment, false)
    },
    store_d = @|fragment_tensor, acc_fragment| {
        let lane = amdgcn_workitem_id_x() % 16;

        for ele in range(0, 8) {
            let r = ele * 2 + (amdgcn_workitem_id_x() % wave_size / 16);

            fragment_tensor.data(addr_tensor(lane, r, fragment_tensor)) = acc_fragment(ele * 2);
        }
    }
};
