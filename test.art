/*
 * D = A * B + C
 *
 * Where:
 *
 * A:    (  -> K )
 *       (       )
 *       (| M    )
 *       (V      )
 *
 * B:    (  -> N )
 *       (       )
 *       (| K    )
 *       (V      )
 *
 * C, D: (  -> N )
 *       (       )
 *       (| M    )
 *       (V      )
 */


//See llvm-project/llvm/test/CodeGen/NVPTX $ python wmma-ptx71-sm80.py for a somewhat decent list of operations.
#[import(cc = "device", name = "llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p1")]
fn nvvm_load_a (_addr : &addrspace(1)i8) -> (simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2]);
#[import(cc = "device", name = "llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p1")]
fn nvvm_load_b (_addr : &addrspace(1)i8) -> (simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2]);
#[import(cc = "device", name = "llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p1")]
fn nvvm_load_c (_addr : &addrspace(1)i8) -> (simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2]);

#[import(cc = "device", name = "llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16")]
fn nvvm_wmma (_a0 : simd[f16 * 2], _a1 : simd[f16 * 2], _a2 : simd[f16 * 2], _a3 : simd[f16 * 2], _a4 : simd[f16 * 2], _a5 : simd[f16 * 2], _a6 : simd[f16 * 2], _a7 : simd[f16 * 2], _b0 : simd[f16 * 2], _b1 : simd[f16 * 2], _b2 : simd[f16 * 2], _b3 : simd[f16 * 2], _b4 : simd[f16 * 2], _b5 : simd[f16 * 2], _b6 : simd[f16 * 2], _b7 : simd[f16 * 2], _c0 : simd[f16 * 2], _c1 : simd[f16 * 2], _c2 : simd[f16 * 2], _c3 : simd[f16 * 2])
        -> (simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2]);

#[import(cc = "device", name = "llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p1")]
fn nvvm_store_d (_addr : &mut addrspace(1)i8, simd[f16 * 2], simd[f16 * 2], simd[f16 * 2], simd[f16 * 2]) -> ();

struct Tensor {
    data : &mut [f16],
    x_dim : i32,
    y_dim : i32,
    stride : i32,
    x0 : i32,
    y0 : i32
}

struct Tensor1 {
    data : &mut addrspace(1)[f16],
    x_dim : i32,
    y_dim : i32,
    stride : i32,
    x0 : i32,
    y0 : i32
}

fn matrix_multiply_naive(a : Tensor, b : Tensor, c : Tensor, r : Tensor) {
    let m = a.y_dim;
    let n = b.x_dim;
    //assert(a.x_dim == b.y_dim);
    let k = a.x_dim;

    let addr_row = @|x : i32, y : i32, s : i32| { x + y * s };

    for y in range(0, m) {
        for x in range(0, n) {
            let mut rv = 0 : f32;

            for i in range(0, k) {
                let av = a.data(addr_row(i, y, a.x_dim)) as f32;
                let bv = b.data(addr_row(x, i, b.x_dim)) as f32;

                rv += av * bv;
            }

            let cv = c.data(addr_row(x, y, c.x_dim)) as f32;

            r.data(addr_row(x, y, r.x_dim)) = (cv + rv) as f16;
        }
    }
}

fn print_matrix (t : Tensor) {
    let addr_row = @|x : i32, y : i32, s : i32| { x + y * s };

    for y in range(0, t.y_dim) {
        for x in range(0, t.x_dim) {
            print_f32(t.data(addr_row(x, y, t.x_dim)) as f32);
            if (x < t.x_dim - 1) { print_string(", "); }
        }
        print_string("\n");
    }
}

fn cuda_gemm_base (a : Tensor1, b : Tensor1, c : Tensor1, d : Tensor1) {
    let a_cuda = bitcast[&addrspace(1)i8](a.data);
    let b_cuda = bitcast[&addrspace(1)i8](b.data);
    let c_cuda = bitcast[&addrspace(1)i8](c.data);
    let d_cuda = bitcast[&mut addrspace(1)i8](d.data);

    let (a1, a2, a3, a4, a5, a6, a7, a8) = nvvm_load_a(a_cuda);
    let (b1, b2, b3, b4, b5, b6, b7, b8) = nvvm_load_b(b_cuda);
    let (c1, c2, c3, c4) = nvvm_load_c(c_cuda);

    let (d1, d2, d3, d4) = nvvm_wmma (a1, a2, a3, a4, a5, a6, a7, a8,
                                      b1, b2, b3, b4, b5, b6, b7, b8,
                                      c1, c2, c3, c4);

    nvvm_store_d(d_cuda, d1, d2, d3, d4);
}

#[export]
fn main (_argc : i32, _argv : &[&[u8]]) -> i32 {
    let local_accel = nvvm_accelerator(0);

    let a_cpu_buffer = alloc_cpu(sizeof[f16]() * 256);
    let b_cpu_buffer = alloc_cpu(sizeof[f16]() * 256);
    let c_cpu_buffer = alloc_cpu(sizeof[f16]() * 256);
    let d_cpu_buffer = alloc_cpu(sizeof[f16]() * 256);
    let r_cpu_buffer = alloc_cpu(sizeof[f16]() * 256);

    let a_cpu = bitcast[&mut [f16]](a_cpu_buffer.data);
    let b_cpu = bitcast[&mut [f16]](b_cpu_buffer.data);
    let c_cpu = bitcast[&mut [f16]](c_cpu_buffer.data);
    let d_cpu = bitcast[&mut [f16]](d_cpu_buffer.data);

    let r_cpu = bitcast[&mut [f16]](r_cpu_buffer.data);

    for n in range(0, 256) {
        a_cpu(n) = random_val_f32() as f16;
        b_cpu(n) = random_val_f32() as f16;
        //c_cpu(n) = random_val_f32() as f16;
        //c_cpu(n) = n as f16;
        c_cpu(n) = 0;
        d_cpu(n) = 0;
    }

    //for k in range(0, 16) {
    //    a_cpu(k * 16 + k) = 1.0 as f16;
    //}

    let a_tensor = Tensor { data = a_cpu, x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
    let b_tensor = Tensor { data = b_cpu, x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
    let c_tensor = Tensor { data = c_cpu, x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
    let d_tensor = Tensor { data = d_cpu, x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
    let r_tensor = Tensor { data = r_cpu, x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };

    matrix_multiply_naive(a_tensor, b_tensor, c_tensor, r_tensor);

    let a_cuda_buffer = local_accel.alloc(sizeof[f16]() * 256);
    let b_cuda_buffer = local_accel.alloc(sizeof[f16]() * 256);
    let c_cuda_buffer = local_accel.alloc(sizeof[f16]() * 256);
    let d_cuda_buffer = local_accel.alloc(sizeof[f16]() * 256);

    copy(a_cpu_buffer, a_cuda_buffer);
    copy(b_cpu_buffer, b_cuda_buffer);
    copy(c_cpu_buffer, c_cuda_buffer);

    for _work_item in local_accel.exec((32, 1, 1), (32, 1, 1)) { //This shouldâ„¢ launch exactly one warp of threads.
        let a_global_tensor = Tensor1 { data = bitcast[&mut addrspace(1)[f16]](a_cuda_buffer.data), x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
        let b_global_tensor = Tensor1 { data = bitcast[&mut addrspace(1)[f16]](b_cuda_buffer.data), x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
        let c_global_tensor = Tensor1 { data = bitcast[&mut addrspace(1)[f16]](c_cuda_buffer.data), x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };
        let d_global_tensor = Tensor1 { data = bitcast[&mut addrspace(1)[f16]](d_cuda_buffer.data), x_dim = 16, y_dim = 16, stride = 1, x0 = 0, y0 = 0 };

        cuda_gemm_base(a_global_tensor, b_global_tensor, c_global_tensor, d_global_tensor);
    }

    copy(d_cuda_buffer, d_cpu_buffer);

    for x in range(0, 256) {
        r_cpu(x) = r_cpu(x) - d_cpu(x);
    }

    print_matrix(r_tensor);

    0
}
