fn @get_accelerator () {
    nvvm_accelerator(0)
}

fn @accelerated_matmul (nvvm : Accelerator, a : Tensor, b : Tensor, c : Tensor, d : Tensor) -> () {
    if (M % 128 == 0 && N % 128 == 0) {
        matrix_multiply_acc_tiled [nvvm_mat_datatype, nvvm_acc_datatype] (nvvm, NVVMWMMAOperations, a, b, c, d);
    } else {
        matrix_multiply_acc_wmma [nvvm_mat_datatype, nvvm_acc_datatype] (nvvm, NVVMWMMAOperations, a, b, c, d);
    }
}

fn @ref_matmul (a : Tensor, b : Tensor, c : Tensor, d : Tensor) -> () {
    for x in range(0, c.x_dim) {
        for y in range(0, c.y_dim) {
            d.data(addr_tensor(x, y, d)) = c.data(addr_tensor(x, y, d));
        }
    }

    matrix_multiply_blas(a, b, d);
}
